/**
 * Service de migration des donn√©es IndexedDB vers le backend SQLite
 */

import { IndexedDBService } from './IndexedDBService'
import { config } from '@/lib/config'

export class MigrationService {
  static API_BASE_URL = config.API_BASE_URL

  /**
   * Obtenir le token JWT depuis localStorage
   */
  static getAuthToken() {
    return localStorage.getItem('vaultestim_token')
  }

  /**
   * Migrer toutes les donn√©es IndexedDB vers le backend
   */
  static async migrateAllData() {
    try {
      console.log('üîÑ D√©but de la migration IndexedDB ‚Üí Backend SQLite...')

      const token = this.getAuthToken()
      if (!token) {
        throw new Error('Token d\'authentification manquant')
      }

      // V√©rifier que IndexedDB a des donn√©es
      const stats = await IndexedDBService.getStorageStats()
      console.log('üìä Statistiques IndexedDB:', stats)

      if (stats.cards === 0 && stats.series === 0) {
        console.log('‚ö†Ô∏è Aucune donn√©e √† migrer dans IndexedDB')
        return {
          success: true,
          message: 'Aucune donn√©e √† migrer',
          migrated: {
            cards: 0,
            series: 0,
            blocks: 0,
            extensions: 0
          }
        }
      }

      const migrationResults = {
        cards: 0,
        series: 0,
        blocks: 0,
        extensions: 0,
        errors: []
      }

      // 1. Migrer les cartes d√©couvertes
      try {
        const cards = await IndexedDBService.loadDiscoveredCards()
        if (cards.length > 0) {
          console.log(`üì¶ Migration de ${cards.length} cartes d√©couvertes...`)
          const response = await this.migrateDiscoveredCards(cards, token)
          migrationResults.cards = response.count
          console.log(`‚úÖ ${response.count} cartes migr√©es`)
        }
      } catch (error) {
        console.error('‚ùå Erreur migration cartes:', error)
        migrationResults.errors.push(`Cartes: ${error.message}`)
      }

      // 2. Migrer la base de donn√©es des s√©ries
      try {
        const series = await IndexedDBService.loadSeriesDatabase()
        if (series.length > 0) {
          console.log(`üìö Migration de ${series.length} s√©ries...`)
          const response = await this.migrateSeries(series, token)
          migrationResults.series = response.count
          console.log(`‚úÖ ${response.count} s√©ries migr√©es`)
        }
      } catch (error) {
        console.error('‚ùå Erreur migration s√©ries:', error)
        migrationResults.errors.push(`S√©ries: ${error.message}`)
      }

      // 3. Migrer les blocs personnalis√©s
      try {
        const blocks = await IndexedDBService.loadCustomBlocks()
        if (blocks.length > 0) {
          console.log(`üß± Migration de ${blocks.length} blocs personnalis√©s...`)
          const response = await this.migrateCustomBlocks(blocks, token)
          migrationResults.blocks = response.count
          console.log(`‚úÖ ${response.count} blocs migr√©s`)
        }
      } catch (error) {
        console.error('‚ùå Erreur migration blocs:', error)
        migrationResults.errors.push(`Blocs: ${error.message}`)
      }

      // 4. Migrer les extensions personnalis√©es
      try {
        const extensions = await IndexedDBService.loadCustomExtensions()
        if (extensions.length > 0) {
          console.log(`üìù Migration de ${extensions.length} extensions personnalis√©es...`)
          const response = await this.migrateCustomExtensions(extensions, token)
          migrationResults.extensions = response.count
          console.log(`‚úÖ ${response.count} extensions migr√©es`)
        }
      } catch (error) {
        console.error('‚ùå Erreur migration extensions:', error)
        migrationResults.errors.push(`Extensions: ${error.message}`)
      }

      console.log('üéâ Migration termin√©e!')
      console.log('üìä R√©sultats:', migrationResults)

      return {
        success: migrationResults.errors.length === 0,
        message: migrationResults.errors.length === 0
          ? 'Migration r√©ussie'
          : `Migration partielle avec ${migrationResults.errors.length} erreurs`,
        migrated: {
          cards: migrationResults.cards,
          series: migrationResults.series,
          blocks: migrationResults.blocks,
          extensions: migrationResults.extensions
        },
        errors: migrationResults.errors
      }
    } catch (error) {
      console.error('‚ùå Erreur migration globale:', error)
      throw error
    }
  }

  /**
   * Migrer les cartes d√©couvertes
   */
  static async migrateDiscoveredCards(cards, token) {
    const response = await fetch(`${this.API_BASE_URL}/collection/migrate-discovered`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({ cards })
    })

    if (!response.ok) {
      const error = await response.json()
      throw new Error(error.error || 'Erreur migration cartes')
    }

    return await response.json()
  }

  /**
   * Migrer la base de donn√©es des s√©ries
   */
  static async migrateSeries(series, token) {
    const response = await fetch(`${this.API_BASE_URL}/collection/migrate-series`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({ series })
    })

    if (!response.ok) {
      const error = await response.json()
      throw new Error(error.error || 'Erreur migration s√©ries')
    }

    return await response.json()
  }

  /**
   * Migrer les blocs personnalis√©s
   */
  static async migrateCustomBlocks(blocks, token) {
    const response = await fetch(`${this.API_BASE_URL}/collection/migrate-blocks`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({ blocks })
    })

    if (!response.ok) {
      const error = await response.json()
      throw new Error(error.error || 'Erreur migration blocs')
    }

    return await response.json()
  }

  /**
   * Migrer les extensions personnalis√©es
   */
  static async migrateCustomExtensions(extensions, token) {
    const response = await fetch(`${this.API_BASE_URL}/collection/migrate-custom-extensions`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({ extensions })
    })

    if (!response.ok) {
      const error = await response.json()
      throw new Error(error.error || 'Erreur migration extensions')
    }

    return await response.json()
  }

  /**
   * Nettoyer IndexedDB apr√®s migration r√©ussie
   */
  static async cleanupIndexedDB() {
    try {
      console.log('üßπ Nettoyage IndexedDB apr√®s migration...')
      await IndexedDBService.clearAllData()
      console.log('‚úÖ IndexedDB nettoy√©e')
      return true
    } catch (error) {
      console.error('‚ùå Erreur nettoyage IndexedDB:', error)
      return false
    }
  }

  /**
   * V√©rifier si des donn√©es existent dans IndexedDB
   */
  static async hasIndexedDBData() {
    try {
      const stats = await IndexedDBService.getStorageStats()
      return stats.cards > 0 || stats.series > 0
    } catch (error) {
      console.error('‚ùå Erreur v√©rification IndexedDB:', error)
      return false
    }
  }

  /**
   * V√©rifier si des donn√©es existent dans le backend
   */
  static async hasBackendData(token) {
    try {
      const response = await fetch(`${this.API_BASE_URL}/collection/discovered`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })

      if (!response.ok) {
        return false
      }

      const data = await response.json()
      return data.cards && data.cards.length > 0
    } catch (error) {
      console.error('‚ùå Erreur v√©rification backend:', error)
      return false
    }
  }

  /**
   * D√©terminer si une migration est n√©cessaire
   */
  static async needsMigration() {
    try {
      const token = this.getAuthToken()
      if (!token) {
        return false
      }

      const hasIndexedDB = await this.hasIndexedDBData()
      const hasBackend = await this.hasBackendData(token)

      // Migration n√©cessaire si IndexedDB a des donn√©es mais pas le backend
      return hasIndexedDB && !hasBackend
    } catch (error) {
      console.error('‚ùå Erreur v√©rification migration:', error)
      return false
    }
  }

  /**
   * Migration automatique au d√©marrage (si n√©cessaire)
   */
  static async autoMigrate() {
    try {
      const needsMigration = await this.needsMigration()

      if (needsMigration) {
        console.log('üîÑ Migration automatique d√©tect√©e...')
        const result = await this.migrateAllData()

        if (result.success) {
          console.log('‚úÖ Migration automatique r√©ussie')
          // Optionnel: nettoyer IndexedDB apr√®s migration
          // await this.cleanupIndexedDB()
        }

        return result
      }

      console.log('‚úÖ Aucune migration n√©cessaire')
      return { success: true, message: 'Aucune migration n√©cessaire' }
    } catch (error) {
      console.error('‚ùå Erreur migration automatique:', error)
      throw error
    }
  }
}
